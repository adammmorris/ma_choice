geom_bar(position = 'fill') +
#theme_black() +
labs(x = "Self-reported", y = 'Proportion of\nsubjects') +
guides(fill = guide_legend(title = 'Fitted')) +
title('Property 1: One vs. multiple attributes') +
#scale_y_continuous(limits = c(0,1), breaks = c(0,1)) +
scale_y_continuous(breaks = NULL) +
scale_fill_brewer(palette = 'Set1') +
theme(axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=22, face = "bold"),
legend.title = element_text(size = 22, face = "bold"),
legend.text = element_text(size = 18))
ggplot(df.demo.filt, aes(x = bin.wts, fill = bin.wts.real, group = bin.wts.real)) +
geom_bar(position = 'fill') +
#theme_black() +
labs(x = "Self-reported", y = 'Proportion of\nsubjects') +
guides(fill = guide_legend(title = 'Fitted')) +
title('Property 1: One vs. multiple attributes') +
#scale_y_continuous(limits = c(0,1), breaks = c(0,1)) +
scale_y_continuous(breaks = NULL) +
scale_fill_brewer(palette = 'Set2') +
theme(axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=22, face = "bold"),
legend.title = element_text(size = 22, face = "bold"),
legend.text = element_text(size = 18))
ggplot(df.demo.filt, aes(x = bin.atts, fill = bin.atts.real, group = bin.atts.real)) +
geom_bar(position = 'fill') +
#theme_black() +
labs(x = "Self-reported", y = 'Proportion of\nsubjects') +
guides(fill = guide_legend(title = 'Fitted')) +
title('Property 1: One vs. multiple attributes') +
#scale_y_continuous(limits = c(0,1), breaks = c(0,1)) +
scale_y_continuous(breaks = NULL) +
scale_fill_brewer(palette = 'Set2') +
theme(axis.text=element_text(size=18, colour = "black"),
axis.title=element_text(size=22, face = "bold"),
legend.title = element_text(size = 22, face = "bold"),
legend.text = element_text(size = 18))
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
#geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
#geom_vline(xintercept = 1, color = 'red', linetype = 'dashed')+
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray') #+
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
#geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
#geom_vline(xintercept = 1, color = 'red', linetype = 'dashed')+
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray') #+
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
#geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
#geom_vline(xintercept = 1, color = 'red', linetype = 'dashed')+
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
#geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray') #+
#geom_vline(xintercept = mean(rand.lls) + 1.96 * se(rand.lls), linetype = 'dashed', color = 'red') +
#geom_vline(xintercept = mean(rand.lls) - 1.96 * se(rand.lls), linetype = 'dashed', color = 'red')
ggplot(df.demo.filt, aes(chosen.model.rank)) +
geom_histogram(color = 'black', bins = 50) +
labs(x = "Avg likelihood of out-of-sample choice\nrank of reported model",
y = "Number of\nsubjects\n") +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.rank), size = 1.5, linetype = 'longdash')
rand.lls = numeric(1000)
for (i in 1:length(rand.lls)) {
nrow.cv = nrow(df.cv.filt)
rnd.choices = sample(5,nrow.cv,replace=T)
test = numeric(nrow.cv)
for (j in 1:nrow.cv) {
test[j] = df.cv.filt[j,rnd.choices[j]]
}
rand.lls[i] = mean(test)
}
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
#geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
#geom_vline(xintercept = 1, color = 'red', linetype = 'dashed')+
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray') #+
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_x_continuous(breaks = c(0,.5,1)) +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_x_continuous(breaks = c(0,.5,1)) +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_x_continuous(breaks = c(0,.5,1)) +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'black') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'black')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof chosen model',
y = 'Corr. between reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.filt, aes(x = chosen.model.rank, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof chosen model',
y = 'Corr. between reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n()) %>%
ungroup() %>%
mutate(num.subj.norm = num.subj / max(num.subj),
num.subj.fac = as.factor(num.subj))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects'))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'red') +
guides(fill = guide_colorbar(title = '# of subjects'))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects'))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_font(size = 18))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18))
cor.test(df.demo.filt$one.att.correct, df.demo.filt$bin.wts.correct)
type(1)
df.demo.filt$one.att.correct
df.demo.filt$bin.wts.correct
cor(c(T,F), c(F,T))
cor(c(T, F, T), c(F,T, NA))
as.numeric(df.demo.filt$one.att.correct)
as.numeric(df.demo.filt$bin.wts.correct)
df.demo.filt %>% count(one.att.correct, bin.wts.correct)
sum(df.demo.filt$chosen.model.fac == '1-Att')
sum(df.demo.filt$chosen.model.fac == '1-Att' & df.demo.filt$best.model.fac == 'Full')
which(df.demo.filt$chosen.model.fac == '1-Att' & df.demo.filt$best.model.fac == 'Full')
m.mods = lm(accuracy ~ decisionstyle + mindfulness + sris.tendency + sris.insight +
maia + acs.shifting + acs.focusing + icar_num_correct + gender + age + edu.num + meditation_exp1 +
alerting + orienting + exec +
choice_domain + confidence + consistency1 +
chosen.model.fac + avg.model.ll,
data = df.demo.filt)
summary(m.mods)
m.mods = lm(chosen.model.ll ~ decisionstyle + mindfulness + sris.tendency + sris.insight +
maia + acs.shifting + acs.focusing + icar_num_correct + gender + age + edu.num + meditation_exp1 +
alerting + orienting + exec + chosen.model.fac +
choice_domain + confidence + consistency2,
data = df.demo.filt)
summary(m.mods)
summary(glm(bin.wts.real ~ bin.wts, data = df.demo.filt, family = 'binomial'))
df.demo.filt$bin.wts.real
df.demo.heat
14 / 80
summary(glm(bin.atts.real ~ bin.atts, data = df.demo.filt, family = 'binomial'))
summary(glm(bin.wts.real ~ bin.wts, data = df.demo.filt, family = 'binomial'))
df.demo.filt %>% count(bin.wts, bin.wts.real)
is.na[df.demo.filt$bin.wts]
is.na(df.demo.filt$bin.wts)
df.demo.filt$bin.wts.nona = df.demo.filt$bin.wts
df.demo.filt$bin.wts.nona[is.na(df.demo.filt$bin.wts.nona)] = 'Nope'
df.demo.filt$bin.wts.nona = as.character(df.demo.filt$bin.wts)
df.demo.filt$bin.wts.nona[is.na(df.demo.filt$bin.wts.nona)] = 'Nope'
df.demo.filt$bin.wts.nona = factor(df.demo.filt$bin.wts.nona)
df.demo.filt$bin.wts.nona
df.demo.filt$bin.wts.real.nona = as.character(df.demo.filt$bin.wtsreal.)
df.demo.filt$bin.wts.real.nona[is.na(df.demo.filt$bin.wts.real.nona)] = 'Nope'
df.demo.filt$bin.wts.real.nona = as.character(df.demo.filt$bin.wts.real)
df.demo.filt$bin.wts.real.nona[is.na(df.demo.filt$bin.wts.real.nona)] = 'Nope'
df.demo.filt$bin.wts.real.nona = factor(df.demo.filt$bin.wts.real.nona)
summary(glm(bin.wts.real.nona ~ bin.wts.nona,
data = df.demo.filt %>% ,
family = 'binomial'))
summary(glm(bin.wts.real.nona ~ bin.wts.nona,
data = df.demo.filt,
family = 'binomial'))
summary(glm(bin.atts.real ~ bin.atts, data = df.demo.filt, family = 'binomial'))
df.demo.heat
mean(df.demo.filt$chosen.model.fac == 'Full')
mean(df.demo.filt$best.model.fac == 'Full')
df.demo.filt$chosen.model.num
df.demo.filt = df.demo.filt %>%
mutate(overestimated =
(chosen.model.fac == 'Full' & best.model.fac != 'Full') |
(chosen.model.fac %in% c('BinWts', 'BinAtts') & best.model.fac %in% c('BinWtsAtts', '1-Att')) |
(chosen.model.fac == 'BinWtsAtts' & best.model.fac %in% c('1-Att')))
df.demo.filt$overestimated
mean(df.demo.filt$overestimated)
mean(df.demo.filt$overestimated[df.demo.filt$chose.correct.model == F])
mean(df.demo.filt$best.model.fac == 'Full')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nAvg out-of-sample likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
get.ci(df.demo.filt$chosen.model.ll)
get.ci(rand.lls)
m = lmer(scale(fitted.weight) ~ scale(rating.signed) + (1 | attribute), data = df.attributes.filt)
m = lmer(scale(fitted.weight) ~ scale(rating.signed) + (rating.signed | attribute), data = df.attributes.filt)
m = lmer(scale(fitted.weight) ~ scale(rating.signed) + (scale(rating.signed) | attribute), data = df.attributes.filt)
summary(m)
ggplot(df.demo.filt, aes(x = choice_exp, y = accuracy)) +
geom_point() +
geom_smooth(method='lm')
df.demo.filt$accuracy
ggplot(df.demo.filt, aes(x = choice_exp, y = accuracy)) +
geom_point() +
geom_smooth(method='lm')
# others
ggplot(df.demo.filt, aes(x = choice_domain, y = mse.best)) +
geom_point() +
geom_smooth(method='lm')
# others
ggplot(df.demo.filt, aes(x = choice_domain, y = accuracy)) +
geom_point() +
geom_smooth(method='lm')
summary(lm(accuracy ~ choice_domain, data = df.demo.filt))
summary(lm(scale(accuracy) ~ scale(choice_domain), data = df.demo.filt))
summary(lm(accuracy ~ best.model.ll.magnitude))
summary(lm(accuracy ~ best.model.ll.magnitude, data = df.demo.filt))
summary(lm(accuracy ~ inv.temp + best.model.ll.magnitude, data = df.demo.filt))
summary(lm(accuracy ~ best.model.ll.magnitude, data = df.demo.filt))
summary(lm(scale(accuracy) ~ scale(best.model.ll.magnitude), data = df.demo.filt))
summary(lm(scale(accuracy) ~ scale(inv.temp), data = df.demo.filt))
cor.test(df.demo.filt$best.model.ll.magnitude, df.demo.filt$inv.temp)
summary(lm(scale(accuracy) ~ scale(inv.temp) + scale(best.model.ll.magnitude), data = df.demo.filt))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18))
df.demo.heat
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18)) +
scale_x_discrete(labels = c('Full weighting', 'In-or-out', 'Weighted tallying', 'Tallying', 'Single attribute'))
other.names = c('Full weighting', 'In-or-out', 'Weighted tallying', 'Tallying', 'Single attribute')
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
#scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
other.names = c('Full\nweighting', 'In-or-out', 'Weighted\ntallying', 'Tallying', 'Single\nattribute')
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
#scale_fill_continuous(low = 'gray', high = 'black') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme(axis.text = element_text(size = 18)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects')) +
theme(axis.text = element_text(size = 22), legend.text = element_text(size = 22)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 22), legend.text = element_text(size = 22)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 22),
legend.text = element_text(size = 22)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nOOS likelihood of reported model\n(normalized so worst model = 0, best model = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nOOS likelihood of reported model\n(normalized so worst model = 0, best = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black', bins = 25) +
labs(x = "\nOOS likelihood of reported model\n(normalized so worst model = 0, best = 1)",
y = "# of subjects") +
scale_x_continuous(breaks = c(0,.5,1)) +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'black') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'black')
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black', bins = 25) +
labs(x = "OOS likelihood of reported model\n(worst model = 0, best model = 1)",
y = "# of subjects") +
scale_x_continuous(breaks = c(0,.5,1)) +
scale_y_continuous(breaks = NULL) +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'black') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'black')
## parameter awareness
# across all points
ggplot(df.attributes.filt, aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
#theme_black() +
geom_smooth(method='lm',color = 'black') +
labs(x = 'Self-reported weight', y = 'Fitted weight') +
scale_x_continuous(breaks = c(-1, 0, 1))
m = lmer(scale(fitted.weight) ~ scale(rating.signed) + (scale(rating.signed) | attribute) + (1 | subject), data = df.attributes.filt)
summary(m)
m = lmer(scale(fitted.weight) ~ scale(rating.signed) + (scale(rating.signed) | attribute) + (0 + scale(rating.signed) | subject), data = df.attributes.filt)
summary(m)
ggplot(df.demo.filt, aes(x = chosen.model.rank, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof chosen model',
y = 'Corr. between reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof chosen model',
y = 'Corr. between reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof chosen model',
y = 'Corr. b/w reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.abs)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Normalized OOS likelihood\nof reported model',
y = 'Corr. b/w reported\nand fitted weights') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
summary(glm(bin.wts.real ~ bin.wts,
data = df.demo.filt,
family = 'binomial'))
df.demo.filt$bin.wts
df.demo.filt$bin.wts.real
?chisq.test
chisq.test(df.demo.filt$bin.wts, df.demo.filt$bin.wts.real)
chisq.test(df.demo.filt$one.att, df.demo.filt$one.att.real)
chisq.test(df.demo.filt$bin.wts, df.demo.filt$bin.wts.real)
chisq.test(df.demo.filt$bin.atts, df.demo.filt$bin.atts.real)
View(df.s1.filt)
hist(df.s1.filt$rt)
hist(df.s1.filt$rt[df.s1.filt$rt<15000])
